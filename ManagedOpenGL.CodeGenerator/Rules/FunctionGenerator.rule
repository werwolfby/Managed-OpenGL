<%ruleclass NativeGenerator%>
<%using System%>
<%using System.Collections.Generic%>
<%using WolfGenerator.Core%>
<%using ManagedOpenGL.CodeGenerator%>

<%rule Main( IEnumerable<Function> functionList, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
using System.Runtime.InteropServices;

namespace ManagedOpenGL
{
	public static class OpenGLNative
	{
		unsafe static OpenGLNative()
		{
			<%apply GetFunction( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from functionList%>			
		}
	
		<%apply GenerateFunction( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from functionList%>
	}
}
<%end rule%>

<%rule GetFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%%if (function.Version == null || (function.Version.MajorVersion <= 1 && function.Version.MinorVersion <= 1)) return "";%>
<%= function.Name %> = (<%= function.Name %>Delegate)
	Marshal.GetDelegateForFunctionPointer( WindowsOpenGLNative.wglGetProcAddress( "<%= function.Name %>" ), typeof(<%= function.Name %>Delegate) );
<%end rule%>

<%method string GenerateFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
if (function.Version == null || (function.Version.MajorVersion <= 1 && function.Version.MinorVersion <= 1))
	return GenerateOpenGLFunction( function, typeMapList, csTypeMapList, enumDatas );
return GenerateDelegateFunction( function, typeMapList, csTypeMapList, enumDatas );
<%end method%>

<%rule GenerateOpenGLFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
[DllImport( "opengl32.dll" )]
public static extern <%%if (function.IsUnsafeMethod(typeMapList, csTypeMapList)){%>unsafe <%%}%><%= function.Return.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= function.Name %>( <%join ", " IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, Function function%>
		<%apply GenerateParam( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from function.ParamList%>
	<%end join%> ); // <%%if (function.Contains( "extension" )){%> extension method<%%}%>
	
<%end rule%>

<%rule GenerateDelegateFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
public <%%if (function.IsUnsafeMethod(typeMapList, csTypeMapList)){%>unsafe <%%}%>delegate <%= function.Return.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= function.Name %>Delegate( <%join ", " IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, Function function%>
		<%apply GenerateParam( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from function.ParamList%>
	<%end join%> ); // <%%if (function.Contains( "extension" )){%> extension method<%%}%>

public static readonly <%= function.Name %>Delegate <%= function.Name %>;
<%end rule%>

<%rule GenerateParam( ParamFunctionOption p, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%%if (p.Direction == "out"){%>ref <%%}%><%= p.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= p.ParamName.GetCSName() %><%end rule%>