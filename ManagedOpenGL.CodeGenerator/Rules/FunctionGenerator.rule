<%ruleclass NativeGenerator%>
<%using System%>
<%using System.Collections.Generic%>
<%using ManagedOpenGL.CodeGenerator.Rules%>
<%using WolfGenerator.Core%>
<%using ManagedOpenGL.CodeGenerator%>

<%rule Main( IEnumerable<Function> functionList, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, bool first, string name, IEnumerable<string> names )%>
using System;
using System.Runtime.InteropServices;

namespace ManagedOpenGL
{
	public static partial class OpenGLNative
	{	
		static void OpenGLNative<%= name.ToCSName() %>Init()
		{
			<%apply GetFunction( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from functionList%>			
		}
		
<%% if (first) {%>		
		static OpenGLNative()
		{
			<%apply GenetateCallInit( item ) from names%>
		}

		public static T GetProcAdress<T>( string functionName )
			where T : class
		{
			var ptr = WindowsOpenGLNative.wglGetProcAddress( functionName );
			if (ptr == IntPtr.Zero) return null;
			return Marshal.GetDelegateForFunctionPointer( ptr, typeof(T) ) as T;
		}
<%%}%>
	
		<%apply GenerateFunction( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from functionList%>
	}
}
<%end rule%>

<%rule GenetateCallInit( string name )%>
OpenGLNative<%= name.ToCSName() %>Init();<%end rule%>

<%rule GetFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%%if ((function.Version == null || (function.Version.MajorVersion <= 1 && function.Version.MinorVersion <= 1)) && !function.Contains( "extension" )) 
	return "";%>
_<%= function.Name %> = GetProcAdress< <%= function.Name %>Delegate >( "gl<%= function.Name %>" );
<%end rule%>

<%method string GenerateFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
if ((function.Version == null || (function.Version.MajorVersion <= 1 && function.Version.MinorVersion <= 1)) && !function.Contains( "extension" ))
	return GenerateOpenGLFunction( function, typeMapList, csTypeMapList, enumDatas );
return GenerateDelegateFunction( function, typeMapList, csTypeMapList, enumDatas );
<%end method%>

<%rule GenerateOpenGLFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
[DllImport( "opengl32.dll", EntryPoint="gl<%= function.Name %>" )]
public static extern <%%if (function.IsUnsafeMethod(typeMapList, csTypeMapList)){%>unsafe <%%}%><%= function.Return.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= function.Name %>( <%join ", " IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, Function function%>
		<%apply GenerateParam( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from function.ParamList%>
	<%end join%> ); // <%%if (function.Contains( "extension" )){%> extension method<%%}%>
	
<%end rule%>

<%rule GenerateDelegateFunction( Function function, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
public <%%if (function.IsUnsafeMethod(typeMapList, csTypeMapList)){%>unsafe <%%}%>delegate <%= function.Return.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= function.Name %>Delegate( <%join ", " IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, Function function%>
		<%apply GenerateParam( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from function.ParamList%>
	<%end join%> ); // <%%if (function.Contains( "extension" )){%> extension method<%%}%>

private static <%= function.Name %>Delegate _<%= function.Name %>;

public static <%%if (function.IsUnsafeMethod(typeMapList, csTypeMapList)){%>unsafe <%%}%> <%= function.Return.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= function.Name %>( <%join ", " IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, Function function%>
		<%apply GenerateParam( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from function.ParamList%>
	<%end join%> )
{
	if (_<%= function.Name %> == null) throw new Exception( "Extension method <%= function.Name %> not found" );
	<%% if (function.Return.ReturnType != "void"){%>return <%%}%> _<%= function.Name %>( <%join ", " IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas, Function function%>
		<%apply GenerateParamName( item, typeMapList, csTypeMapList, enumDatas ) IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas from function.ParamList%>
	<%end join%> );
}
<%end rule%>

<%rule GenerateParamName( ValueParamFunctionOption p, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%%if (p.Direction == "out"){%>ref <%%}%><%= p.ParamName.GetCSName() %><%end rule%>

<%rule GenerateParamName( ArrayParamFunctionOption p, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%= p.ParamName.GetCSName() %><%end rule%>

<%rule GenerateParam( ValueParamFunctionOption p, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%%if (p.Direction == "out"){%>ref <%%}%><%= p.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= p.ParamName.GetCSName() %><%end rule%>

<%rule GenerateParam( ArrayParamFunctionOption p, IList<TypeMap> typeMapList, IList<CSTypeMap> csTypeMapList, IList<EnumData> enumDatas )%>
<%%if (p.Direction == "out"){%>[Out]<%%}%><%= p.GetCSName( typeMapList, csTypeMapList, enumDatas ) %> <%= p.ParamName.GetCSName() %><%end rule%>